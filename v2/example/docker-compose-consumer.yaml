version: '3'
services:

  # The core platform, mounts docker control socket and route definition into the image
  consumer-core:
    image: fraunhoferaisec/trusted-connector-core:${EXAMPLE_TAG:-develop}
    tty: true
    stdin_open: true
    volumes:
      - ../log/:/root/log/
      - /var/run/docker.sock:/var/run/docker.sock
      - ../cert-stores/consumer-keystore.p12:/root/etc/consumer-keystore.p12
      - ../cert-stores/truststore.p12:/root/etc/truststore.p12
      - ./example-consumer-routes.xml:/root/deploy/example-consumer-routes.xml
    # Enable this port mappings for debugging or UI access from localhost
    ports:
#      - "5005:5005"
#      - "8181:8181"
#      - "8443:8443"
    # Enable this port mapping (along with "ports:" above) to allow access to IDSCP from outside the ids-wide network
      - "29292:29292"
    networks:
      - ids-wide
      - consumer-internal

  # Data App (REST consumer, displays web page)
  consumer-app:
    image: fraunhoferaisec/example-server:${EXAMPLE_TAG:-develop}
    entrypoint: ["/bin/sh", "-c", "npm install request express convert-csv-to-json && node app.js"]
    volumes:
      - ./example-server/app.js:/app/app.js
    ports:
      - "8081:8081"
    networks:
      - consumer-internal
  api-app:
    build:
      context: ./con-app/
    ports:
      - "8888:8888"
    volumes:
      - ./con-app/app:/app
    command: >
      sh -c "python merge_api_v2.py & python wheat_rust_bot_v2.py & python da_verification.py"
    networks:
      - consumer-internal

networks:
  ids-wide:
    driver: bridge
  consumer-internal:
    driver: bridge
